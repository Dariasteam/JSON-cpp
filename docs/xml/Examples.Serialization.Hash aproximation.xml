<?xml version='1.0' encoding='utf-8'?>
<category id="Examples::Serialization::Hash aproximation" name="Hash aproximation" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Unordered name dependent serialization</brief>
  <doc>Same as previous example but using hash-like serialization
Note that in this case we can put the elements directly on the root

#### json file, "file.json"
```json
{
  "integer"    : 10,
  "likeThis"   : true,
  "accurancy"  : 0.5661,
  "songLyrics" : "And though your dead and gone, believe me, your memory will carry on"
}
```
#### code
```c++
#include &lt;iostream&gt;
#include &lt;string&gt;
#include "serializable.hpp"

class A : public json::Serializable {               // derivate from 'Serializable'
private:
  int    number;
  bool   boolean;
  double precision;
  string blckprde;

  SERIAL_START                                      // asociate each parameter with its name (which must be the same as in 'file.json')
    "likeThis",   boolean,                          // note the comma in between the name and its parameter.
    "accurancy",  precision,                        // parameters are order independent
    "songLyrics", blckprde,
    "integer",    number                            // last element has no comma
  SERIAL_END
public:
  void printContent () {
    std::cout &lt;&lt; number    &lt;&lt; std::endl
              &lt;&lt; boolean   &lt;&lt; std::endl
              &lt;&lt; precision &lt;&lt; std::endl
              &lt;&lt; blckprde  &lt;&lt; std::endl;
  }
  void changeContent () {
    number    = 78;
    boolean   = false;
    precision = 10.1;
    blckprde  = "We'll carry on";
  }
};

int main (void) {
  A obj;
  obj.serializeIn("file.json");  // as the elements are at root, we don't need to specify the path
  obj.printContent();
  obj.changeContent();
  obj.serializeOut("file.json"); // rewrites "file.json" with the information of the object 'obj', at path 'some_path'
}
```

#### ouput
```
10
true
0.5661
And though your dead and gone, believe me, your memory will carry on
```

#### json file, "file.json"
```json
{
  "likeThis" : false,
  "accurancy" : 10.09999999999999964,
  "songLyrics" : "We'll carry on",
  "integer" : 78
}
```

Note the order of the elements has changed and now is the same than used in SERIALIE_START macro. Obviously that is not a problem
if we wanted to run the program again.</doc>
</category>
