<?xml version='1.0' encoding='utf-8'?>
<category id="Tutorials::Serialization::Inheriting serializable ability" name="Inheriting serializable ability" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>No multiple inheritance supported yet</brief>
  <doc>There is a new macro for this case (see <ref ref="Tutorials::Serialization::Serializing pointers of serializable classes#Tutorials::Serialization::Serializing pointers of serializable classes">Serializing pointers of serializable classes</ref>&gt; to know why):

  `SERIAL_START_INHERITED (this_derived_class, base_class)`

To reminding it, think the order is the same than the c++ inheritance declaration
```c++
class derived_class : public base_class {
  SERIAL_START_INHERITED (derived_class, base_class)
  ...
  SERIAL_END
};

```
- Serialization occurs starting from the base class to derived
- You **cannot** mix vector-like and hash-like modes. The used in base class must be used for derived ones.

For this example, we have a base serializable class 'A' which has an integer as parameter and a derived class 'B'
which has a string parameter. As the 'A' parameters **and the serializable macros** are declared protected,
to serialize 'B' implies to serialize its 'A' parameters

#### json file, "file.json"
```
{
  "content" : [
    12, "Run"
  ]
}
```
where 12 is the integer parameter of 'A' and "Run" the string parameter of 'B'

#### code
```
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include "serializable.hpp"

class A : public json::Serializable {
protected:                              // because we want parameters and macro functions to be accessible by B class
  int number;

  SERIAL_START
    number
  SERIAL_END
public:
  virtual void changeContent () { number = 90; }
};

class B : public A {
private:
  std::string word;

  SERIAL_START_INHERITED (B, A)          // new macro for inheritance cases
    word
  SERIAL_END
public:
  void changeContent () {
    number = 90;
    word = "to the hills";
  }
};

int main (void) {
  B obj;
  obj.serializeIn("file.json", "content");
  std::cout &lt;&lt; obj.toText() &lt;&lt; std::endl;
  obj.changeContent();
  obj.serializeOut("file.json", "content");
}
```
#### output
```
[
  12, "Run"
]
```
#### modified json file, "file.json"
```json
{
  "content" : [
    90, "to the hills"
  ]
}
```
</doc>
</category>
