<?xml version='1.0' encoding='utf-8'?>
<category id="Tutorials::Serialization::Using serializable classes as parameters" name="Using serializable classes as parameters" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Also mixing hash-like and vector-like serialization</brief>
  <doc>The following example shows you how to use serializable classes as parameters
mixing vector-like and hash-like modes.

Class 'Hangar' has a vector that stores many instances of 'Rocket'.
The first class uses the hash method while second uses the vector one.

Hangar also has an instance of a 'Personal' which is hash-like serialized

#### json file, "file.json"
```
{
  "temperature" : 15.6,
  "rockets" : [
    [ "Saturn V" ],
    [ "Soyuz"    ],
    [ "Proton"   ],
    [ "R7"       ],
    [ "Falcon 9" ]
  ],
  "personal" : {
    "engineers"     : 12,
    "security"      : 4,
    "enough-people" : false
  }
}
```
The 'rockets' vector has many vectors in it because the 'Rocket' class is serialized vector-like, the code show this clearly
#### code
```
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include "serializable.hpp"

class Rocket : public json::Serializable {               // vector serialization
private:
  string name;

  SERIAL_START
    name
  SERIAL_END
public:
  void changeContent () { name = "myNewName"; }
};

class Personal : public json::Serializable {              // hash serialization
private:
  int engi;
  int sec;
  bool enough;

  SERIAL_START
    "engineers", engi,
    "security", sec,
    "enough-people", enough
  SERIAL_END
public:
  void changeContent () {
    engi   = 100;
    sec    = 200;
    enough = true;
  }
};

class Hangar : public json::Serializable {                // hash serialization
private:
  vector &lt;Rocket&gt; elements;
  Personal people;
  float temp;

  SERIAL_START
    "personal", people,
    "rockets", elements,
    "temperature", temp
  SERIAL_END

public:
  void changeContent () {
    temp = 0;
    for (Rocket&amp; r : elements) {
      r.changeContent();
    }
    people.changeContent();
  }
};

int main (void) {
  Hangar obj;
  obj.serializeIn("file.json");
  std::cout &lt;&lt; obj.toText() &lt;&lt; std::endl;
  obj.changeContent();
  obj.serializeOut("file.json");
}
```
#### output
```
{
  "personal" : {
    "engineers" : 12,
    "security" : 4,
    "enough-people" : false
  },
  "rockets" : [
    [
      "Saturn V"
    ],
    [
      "Soyuz"
    ],
    [
      "Proton"
    ],
    [
      "R7"
    ],
    [
      "Falcon 9"
    ]
  ],
  "temperature" : 15.60000038146972656
}
```
#### modified json file, "file.json"
```json
{
  "personal" : {
    "engineers" : 100,
    "security" : 200,
    "enough-people" : true
  },
  "rockets" : [
    [
      "myNewName"
    ],
    [
      "myNewName"
    ],
    [
      "myNewName"
    ],
    [
      "myNewName"
    ],
    [
      "myNewName"
    ]
  ],
  "temperature" : 0
}
```</doc>
</category>
