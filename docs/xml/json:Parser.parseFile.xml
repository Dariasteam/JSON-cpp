<?xml version='1.0' encoding='utf-8'?>
<category id="json:Parser::parseFile" name="parseFile" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Reads a json file</brief>
  <doc>## Explanation

Tries to parse the file and to create the hierarchy of it in `tree`.
The method checks if the file exists, can be opened and is not empty before
starting the process.

If there are syntax errors in the input file, they are
catched and a &amp;lt;JsonLog&amp;gt; is generated for each of them. Those
structs are stacked in inner vectors nad are accesible with the &amp;lt;getErrors&amp;gt; and &amp;lt;getWarnings&amp;gt; functions. The method returns a
binary flag informing possible problems. The cases are described at &amp;lt;JSON\_PARSE\_OUTPUT&amp;gt;

If verbosity is activated, the method shows messages by cerr when errors or
warnings happen.*There are no message for errors in file handling**.
Errors / Warnings are described at &amp;lt;JSON\_PARSER\_FLAGS&amp;gt;

  - Warnings: empty container (hash or array)
  - Errors:   everything else

Those message use this syntax:

  - Warning parsing JSON: &amp;lt;EMPTY&amp;gt; in path: $path_of_the_warning
  - Error parsing JSON: &amp;lt;NO\_CLOSED|EXPECTED\_MORE|INVALID\_KEY&amp;gt; in path: $path_of_the_error

`tree` object is only modified if there are no errors (warnings are allowed) and the method returns 1 or 5.

## Example
```c++
json::JsonTree tree;                                                  // object to store the information of the file
json::Parser parser;

parser.parseFile ("no_file", tree, false);                            // returns 2, JSON_PARSE_OUTPUT::CANT_OPEN_FILE, no output by cerr
parser.parseFile ("no_file", tree, true);                             // returns 2, JSON_PARSE_OUTPUT::CANT_OPEN_FILE, no output by cerr
parser.parseFile ("no_file", tree);                                   // returns 2, JSON_PARSE_OUTPUT::CANT_OPEN_FILE, no output by cerr

parser.parseFile ("empty_file.json", tree, false);                    // returns 16, JSON_PARSE_OUTPUT::EMPTY_FILE, no output by cerr
parser.parseFile ("empty_file.json", tree, true);                     // returns 16, JSON_PARSE_OUTPUT::EMPTY_FILE, no output by cerr
parser.parseFile ("empty_file.json", tree);                           // returns 16, JSON_PARSE_OUTPUT::EMPTY_FILE, no output by cerr

parser.parseFile ("file_with_errors.json", tree, false);              // returns 8, JSON_PARSE_OUTPUT::ERRRORS, no output by cerr
parser.parseFile ("file_with_errors.json", tree, true);               // returns 8, JSON_PARSE_OUTPUT::ERRRORS, output by cerr
parser.parseFile ("file_with_errors.json", tree);                     // returns 8, JSON_PARSE_OUTPUT::ERRRORS, output by cerr

parser.parseFile ("file_with_warnings.json", tree, false);            // returns 5, JSON_PARSE_OUTPUT::WARNINGS + JSON_PARSE_OUTPUT::OK, no output by cerr
parser.parseFile ("file_with_warnings.json", tree, true);             // returns 5, JSON_PARSE_OUTPUT::WARNINGS + JSON_PARSE_OUTPUT::OK, output by cerr
parser.parseFile ("file_with_warnings.json", tree);                   // returns 5, JSON_PARSE_OUTPUT::WARNINGS + JSON_PARSE_OUTPUT::OK, output by cerr

parser.parseFile ("file_with_warnings_and_errors.json", tree, false); // returns 12, JSON_PARSE_OUTPUT::WARNINGS + JSON_PARSE_OUTPUT::ERRORS, no output by cerr
parser.parseFile ("file_with_warnings_and_errors.json", tree, true);  // returns 12, JSON_PARSE_OUTPUT::WARNINGS + JSON_PARSE_OUTPUT::ERRORS, output by cerr
parser.parseFile ("file_with_warnings_and_errors.json", tree);        // returns 12, JSON_PARSE_OUTPUT::WARNINGS + JSON_PARSE_OUTPUT::ERRORS, output by cerr

parser.parseFile ("well_formated_file.json", tree, false);            // returns 1, JSON_PARSE_OUTPUT::OK, no output by cerr
parser.parseFile ("well_formated_file.json", tree, true);             // returns 1, JSON_PARSE_OUTPUT::OK, output by cerr
parser.parseFile ("well_formated_file.json", tree);                   // returns 1, JSON_PARSE_OUTPUT::OK, output by cerr
```
#### Fast checking everything went well

```c++
json::JsonTree tree;
json::Parser parser;

if (parser.parseFile ("example.json", tree) &amp; json::JSON_PARSE_OUTPUT::OK) {
 // if we are here tree contains the info of example.json file
}
```

</doc>
</category>
