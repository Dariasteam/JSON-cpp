<?xml version='1.0' encoding='utf-8'?>
<category id="Tutorials::Serialization::Getting started" name="Getting started" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>How the info is stored and how can You do it</brief>
  <doc>#### Serialization modes

Taking advantages of the json hash and vector support, serialization is implemented in two different ways,
giving flexibility to the programmer to choose the best in each case.

- _Vector-like_ : The information is put in a vector, so it position dependent

  ```
  [5, false, "We're no strangers to love"]
  ```


- _Hash-like_ : The information has a key for each element so it can be handle by its "name" no matter order

  ```
  {
    "hours" : 5,
    "arrived-yet" : false,
    "rckrll" : "We're no strangers to love"
  }
  ```

Note that in json the root of a file must be always a hash, so if you want to serialize in vector way you must
always handle one path (at least).

```json
{
  "path-to-elements-serialized-as-vectors" : [
    5,
    false,
    "We're no strangers to love"
  ]
}
```
#### Understanding the process

Serialization process is divided in two sections

- a) To translate information between serializable objects and <ref ref="json::JsonTree#json::JsonTree">json::JsonTree</ref>
- b) To translate the information between <ref ref="json::JsonTree#json::JsonTree">json::JsonTree</ref> and a file / string

Depending if you are `Serializing In` (from file / string to c++ objects) or `Serializing Out`
(from c++ object to file / string) the steps order is **b, a** or **a, b**.
Lets explain more precissely each one:

**Serialization** is archived due to the combination of the inheritance from json::serializable and
the explicit declaration of the involved parameters of your custom class in between two special macros.
One of the macros adds to your class the method `serialize` which receives a <ref ref="json::JsonTree#json::JsonTree">json::JsonTree</ref> and depending
of the situation can

  - copy the values of the attributes of the serializable object in it. Also respecting the inner existing hierarchy.
  - initialize the parameters of the object with the data of the JsonTree

So when the method execution has finished, also has done it the Serialization process.

**String management** is made by &amp;lt;json::JsonTree.toText&amp;gt; and &amp;lt;json::JsonTree::parseString&amp;gt; functions.
It is auto included in the file handling process so you don't need to worry about this phase unless you
explicitly need a string. (For example for debugging reasons)

**File handling** is done entirely by a <ref ref="json::Parser#json::Parser">json::Parser</ref> and can do nothing more (or less) than it.
That means you can do things like putting serializable objects data and other stuff or many not own relationed classes in the same file.

A dedicated section to what can be done at this ambit can be found at <ref ref="Tutorials::Serialization::File management#Tutorials::Serialization::File management">File management</ref>
</doc>
</category>
